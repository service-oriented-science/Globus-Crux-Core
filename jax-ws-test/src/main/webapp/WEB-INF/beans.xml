<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-soap.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>

    <!--
    Most of these classes would be part of the framework as opposed to being defined by the service
    developer.  They are implemented in the com.counter package for the sake of illustration.
    -->

    <!--
    This is the resource context that is used for accessing resources.  This
    could be passed around between the services that share the same resources.
    Might be worth abstracting out the resource storage from the context class.
    -->
    <bean id="resourceContext" class="com.counter.InMemoryResourceContext"/>

    <!--
    This is the actual service implementation.
    -->
    <bean id="counterResource" class="com.counter.CounterImpl">
        <property name="resourceContext" ref="resourceContext"/>


        <property name="idGen">
            <bean class="com.counter.SimpleIDGenerator"/>
        </property>

        <!--
        This is an epr factory which is build on top of the jax-ws service implementation.
        So, we pass in the service defined below.
        -->
        <property name="eprFac">
            <bean class="com.counter.ServiceEPRFactory">
                <property name="JAXBPackage" value="com.counter"/>
                <property name="endpoint" ref="counter"/>
                <property name="endpointAddress" value="http://localhost:8080/jax-ws-test/counter"/>
            </bean>
        </property>
    </bean>

    <!--
    This is the operation provider for GetResourceProperty.  I am constructing it completely
    here, but it should be made a bit easier to create Operation Providers.
    -->

    <bean id="getRPProvider" class="org.globus.crux.wsrf.properties.GetRPProvider">
        <property name="rps">
            <bean class="org.globus.crux.wsrf.properties.AnnotationResourcePropertySet">
                <constructor-arg index="0" ref="counterResource"/>
            </bean>
        </property>
    </bean>

    <!--
    This is where the proxy service is created.  The service object is supplied, as well as
    the interface that was generated by wsdl2java.  Finally, we also declare the providers
    needed to finish implementing the interface.
    -->
    <bean id="counterService" class="com.counter.ProviderServiceFactory">
        <property name="target" ref="counterResource"/>
        <property name="interf" value="com.counter.CounterPortType"/>
        <property name="providers">
            <list>
                <ref bean="getRPProvider"/>
            </list>
        </property>
    </bean>

    <!--
    This is an interceptor which extracts the key from the addressing headers in the request.
    This requires the ResourceContext to populate.  it also uses the appropriate jaxb configuration.
    -->
    <bean id="keyInterceptor" class="com.counter.IdExtractorInterceptor">
        <property name="context" ref="resourceContext"/>
        <property name="JAXBParam" value="com.counter"/>
    </bean>

    <!--
    This is the standard configuration for a JAXWS service from cxf.
    -->
    <jaxws:endpoint xmlns:counter="http://counter.com/service"
                    id="counter"
                    implementor="#counterService"
                    address="/counter"
                    serviceName="counter:CounterService"
                    implementorClass="com.counter.CounterPortType">
        <jaxws:inInterceptors>
            <ref bean="keyInterceptor"/>
        </jaxws:inInterceptors>
        <jaxws:features>
            <wsa:addressing xmlns:wsa="http://cxf.apache.org/ws/addressing"/>
        </jaxws:features>
    </jaxws:endpoint>

</beans>